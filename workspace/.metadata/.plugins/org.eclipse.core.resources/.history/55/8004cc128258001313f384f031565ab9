import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;


// TODO: Auto-generated Javadoc
/**
 * The Class KFoldValidator. Evaluates a SoundClassifier using K fold validation (K = 10)
 */
public class KFoldValidator {
	
	/** The number of folds. */
	public static final int K = 10;
	
	/** The classifier. */
	private SoundClassifier classifier;
	
	/** The E values for the speech data. */
	private double[] Espeech;
	
	/** The M values for the speech data. */
	private double[] Mspeech;
	
	/** The Z values for the speech data. */
	private double[] Zspeech;
	
	/** The E values for the silence data. */
	private double[] Esilence;
	
	/** The M values for the silence data. */
	private double[] Msilence;
	
	/** The Z values for the silence data. */
	private double[] Zsilence;
	
	/** The number of speech samples. */
	private int noSpeech;
	
	/** The number of silence samples. */
	private int noSilence;
	
	/** The total number of samples. */
	private int noSamples;
	
	/** The prior probability that a sample belongs to class speech. */
	final double priorProbabilitySpeech = 0.5;
	
	
	/**
	 * Instantiates a new k fold validator. The speech samples are in the first noSpeech indices of each array. The remaining data belongs to silence instances.
	 *
	 * @param e E values for input
	 * @param m M values for input
	 * @param z Z values for input
	 * @param noSpeech the number of samples which are speech
	 * @param noSilence the number of samples which are silence
	 */
	public KFoldValidator( double[] e, double[] m,
			double[] z, int noSpeech, int noSilence) {
		super();
		Espeech = Arrays.copyOfRange(e, 0, noSpeech);
		Esilence = Arrays.copyOfRange(e, noSpeech, e.length);
		Mspeech = Arrays.copyOfRange(m, 0, noSpeech);
		Msilence = Arrays.copyOfRange(m, noSpeech, m.length);
		Zspeech = Arrays.copyOfRange(z, 0, noSpeech);
		Zsilence = Arrays.copyOfRange(z,noSpeech,z.length);
		
		this.noSpeech = noSpeech;
		this.noSilence = noSilence;
		this.noSamples = noSpeech + noSilence;
	}
	
	/**
	 * Gets the training data for a particular fold over a particular metric, balancing to include half speech half silence..
	 *
	 * @param speech values of the metric for speech
	 * @param silence values of the metric for silence
	 * @param startTestFold the start position of the test fold for each of the arrays
	 * @param endTestFold the end position of the test fold for each of the arrays
	 * @param sizeOfFold the size of fold
	 * @return the training
	 */
	public double[] getTraining(double[] speech, double[] silence, int startTestFold, int endTestFold, int sizeOfFold){
		double training[] = new double[noSamples - sizeOfFold];
		int cursor = 0; //where are we in the training array
		//get values from speech
		for(int i = 0; i < noSpeech; i++){
			if(i>= startTestFold && i < endTestFold)
				continue; //dont add values in the test fold
			else
				training[cursor++] = speech[i];
		}
		//get values from silence
		for(int i = 0; i < noSilence; i++){
			if(i>= startTestFold && i < endTestFold)
				continue; //dont add values in the test fold
			else
				training[cursor++] = silence[i];
		}
		
		return training;
	}
	
	/**
	 * Gets the test data for a particular fold over a particular metric, balancing to include half speech half silence..
	 *
	 * @param speech values of the metric for speech
	 * @param silence values of the metric for silence
	 * @param startTestFold the start position of the test fold for each of the arrays
	 * @param endTestFold the end position of the test fold for each of the arrays
	 * @param sizeOfFold the size of fold
	 * @return the test
	 */
	private double[] getTest(double[] speech, double[] silence, int startTestFold, int endTestFold, int sizeOfFold){
		double[] test = new double[sizeOfFold];
		int cursor = 0; //where are we in the test array
		
		//get values from speech
		for(int i = startTestFold; i < endTestFold; i++){
			test[cursor++] = speech[i];
		}
		//get values from silence
		for(int i = startTestFold; i < endTestFold; i++){
			test[cursor++] = silence[i];
		}
		
		return test;
	}
	
	/**
	 * K fold test.
	 *
	 * @param noFolds the no folds
	 * @param foldNo the fold no
	 * @return the double
	 */
	public double KFoldTest(int noFolds, int foldNo){
		int sizeOfFold = (noSamples / noFolds); //size of segment of test fold (total of speech and silence)
		int startTestFold = foldNo * sizeOfFold / 2; //start and end of test fold in each of the speech or silence arrays
		int endTestFold = startTestFold + sizeOfFold / 2; 
		
		double[] trainingE = getTraining(Espeech,Esilence,startTestFold,endTestFold,sizeOfFold);
		double[] trainingM = getTraining(Mspeech,Msilence,startTestFold,endTestFold,sizeOfFold);
		double[] trainingZ = getTraining(Zspeech,Zsilence,startTestFold,endTestFold,sizeOfFold);
		
		
		double[] testE = getTest(Espeech,Esilence,startTestFold,endTestFold,sizeOfFold);
		double[] testM = getTest(Mspeech,Msilence,startTestFold,endTestFold,sizeOfFold);
		double[] testZ = getTest(Zspeech,Zsilence,startTestFold,endTestFold,sizeOfFold);
		
		classifier = new SoundClassifier(priorProbabilitySpeech,Arrays.copyOfRange(trainingE, 0, trainingE.length/2),
				Arrays.copyOfRange(trainingM, 0, trainingM.length/2),
				Arrays.copyOfRange(trainingZ, 0, trainingZ.length/2),
				Arrays.copyOfRange(trainingE, trainingE.length/2, trainingE.length),
				Arrays.copyOfRange(trainingM, trainingM.length/2, trainingM.length),
				Arrays.copyOfRange(trainingZ, trainingZ.length/2, trainingZ.length));
		
		double noCorrect = 0;
		/*Test speech instances*/
		for(int i = 0; i < sizeOfFold/2; i++){
			if(classifier.classify(testE[i], testM[i], testZ[i]) == "Speech"){
				noCorrect += 1;
			}
		}
		
		/*Test silence instances*/
		for(int i = sizeOfFold/2; i < sizeOfFold; i++){
			if(classifier.classify(testE[i], testM[i], testZ[i]) == "Silence"){
				noCorrect += 1;
			}
		}
		
		double percentageCorrect = (noCorrect/sizeOfFold) * 100;
		return percentageCorrect;
		
	}
	
	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String args[]){
		KFoldValidator validator;
		
		File input = null;
		int noSpeech; //how many of the files are speech
		int noSilence;//how many are silence
		int totalSignals;
		/*Find input file*/
		if(args.length < 3){
			System.err.println("KFoldValidator noSpeech noSilence inputFile");
			System.exit(1);
		}
		
		noSpeech = Integer.parseInt(args[0]);
		noSilence = Integer.parseInt(args[1]);
		totalSignals = noSpeech + noSilence;
		input = new File(args[2]);
		
		/*Instantiate file reader*/
		Scanner fileScan = null;
		try {
			fileScan = new Scanner(input);
		} catch (FileNotFoundException e) {
			System.err.println("Could not find or open input file provided");
			e.printStackTrace();
		}
		
		/*instantiate arrays of data*/
		double[] E = new double[totalSignals];
		double[] M = new double[totalSignals];
		double[] Z = new double[totalSignals];
	
	
		
		/*Retrieve data from file*/
		if(fileScan.hasNextLine()){
			fileScan.nextLine(); //read off column headers
		}
		
		int currentSample = 0; //index of sample we are currently looking at
		Scanner lineScan; //scans each line
		while(fileScan.hasNextLine() & currentSample < totalSignals){
			String line = fileScan.nextLine();
			lineScan = new Scanner(line);
			lineScan.useDelimiter(",");
			E[currentSample] = lineScan.nextDouble();
			M[currentSample] = lineScan.nextDouble();
			Z[currentSample] = lineScan.nextDouble();
			currentSample++;
			lineScan.close();
		}
		validator = new KFoldValidator(E,M,Z,50,50);
		
		double averageAccuracy = 0.0;
		for(int i = 0; i < K; i++){
			averageAccuracy += validator.KFoldTest(K, i);
		}
		averageAccuracy /= K;
		System.out.println("Over " + K + " folds the average accuracy was: " + averageAccuracy+"%");
	
	}
	
	
}
