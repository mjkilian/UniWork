import javax.swing.JFrame;
import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


public class SignalGraph extends JFrame{
	private double scalingFactor = 1;
	
	
	public SignalGraph(Sampling s, double scalingFactor){
		super("Signal Graph");
	    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    
		this.scalingFactor = scalingFactor;
	   	ShortTermAnalysis sta = new ShortTermAnalysis();
		
		XYSeries original = buildSeriesAgainstTime("Signal",s,s.getSampling());
		XYSeries energy = buildSeriesAgainstTime("Enegry",s,sta.shortTermEnergy(s));
		XYSeries magnitude = buildSeriesAgainstTime("Magnitude",s,sta.shortTermMagnitude(s));
		XYSeries zeroCrossing =  buildSeriesAgainstTime("Average Zero Crossing Rate",s,sta.shortTermAverageZCR(s));
		

        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(original);
        dataset.addSeries(energy);
        dataset.addSeries(magnitude);
        dataset.addSeries(zeroCrossing);
        

        JFreeChart chart = ChartFactory.createXYLineChart(
                "Signal Plot",
                "Time (ms)",
                "s[t],E[t],M[t],Z[t]",
                dataset, 
                PlotOrientation.VERTICAL,
                true,
                true,
                false
                );

        JPanel panel = new JPanel();
        ChartPanel chartPanel = new ChartPanel(chart);
        panel.add(chartPanel);
        this.add(panel);
        this.setVisible(true);
	}

	private XYSeries buildSeriesAgainstTime(String name, Sampling s, double values[]){
		XYSeries plot = new XYSeries(name);
		for(double i = 0; i < s.getSampling().length; i++){
			plot.add(i / (s.getSampling().length / s.getSamplingRate()), values[i] * scalingFactor);
		}
		return plot;
	}
}

