import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;


// TODO: Auto-generated Javadoc
/**
 * The Class SignalAnalyser. Builds a text file containing the metrics E,M,Z for all 100 files
 */
public class SignalAnalyser {
	
	/** The Constant SCALING_FACTOR. */
	public static final double SCALING_FACTOR = 1000; //scaling factor for signals
	
	/** The Constant SAMPLE_LEN. */
	public static final double SAMPLE_LEN  = 0.3; //number of seconds each sample lasts
	
	/** The Constant STEP (as a number of samples). */
	public static final int STEP = 1; //number of milliseconds to step between each short term analysis
	
	/** The Constant WINDOW_LENGTH (in seconds). */
	public static final double WINDOW_LENGTH = 0.03; //length of analysis window in seconds (30ms)

	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String[] args) {
		
		File speechDirectory = new File("data/speechdata");
		File silenceDirectory = new File("data/silencedata");
		File output = new File("data/100SignalAnalysis.txt");
		
		FileWriter fw = null;
		BufferedWriter bw = null;
		
		/*instantiate file writer*/
		try {
			if (!output.exists()) {
				output.createNewFile();
			}
			fw = new FileWriter(output,true);
			bw = new BufferedWriter(fw);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		/*write column headers*/
		try {
			bw.write("E,M,Z\n");
		} catch (IOException e1) {
			System.err.println("Problem writing column headers to output file");
			e1.printStackTrace();
		}
		/*analyse speech data*/
		if(!speechDirectory.isDirectory()){
			System.err.println("Directory for speech data not found");
			System.exit(1);
		}
		for(File speechfile : speechDirectory.listFiles()){
			Sampling speechSample = new Sampling(speechfile,SAMPLE_LEN,SCALING_FACTOR);
			double E = Utilities.averageLogarithmicValueOfArray(speechSample.shortTermAverageEnergy(STEP, WINDOW_LENGTH));
			double M = Utilities.averageLogarithmicValueOfArray(speechSample.shortTermAverageMagnitude(STEP, WINDOW_LENGTH));
			double Z = Utilities.averageValueOfArray(speechSample.shortTermAverageZeroCrossingRate(STEP, WINDOW_LENGTH));
			try {
				bw.write(E + "," + M + "," + Z + "\n");
			} catch (IOException e) {
				System.err.println("Could not append speech data from " + speechfile.getName() + " to output.");
				e.printStackTrace();
			}
		}
		
		/*analyse silence data*/
		if(!silenceDirectory.isDirectory()){
			System.err.println("Directory for silence data not found");
			System.exit(1);
		}
		for(File silencefile : silenceDirectory.listFiles()){
			Sampling silenceSample = new Sampling(silencefile,SAMPLE_LEN,SCALING_FACTOR);
			double E = Utilities.averageLogarithmicValueOfArray(silenceSample.shortTermAverageEnergy(STEP, WINDOW_LENGTH));
			double M = Utilities.averageLogarithmicValueOfArray(silenceSample.shortTermAverageMagnitude(STEP, WINDOW_LENGTH));
			double Z = Utilities.averageValueOfArray(silenceSample.shortTermAverageZeroCrossingRate(STEP, WINDOW_LENGTH));
			try {
				bw.write(E + "," + M + "," + Z + "\n");
			} catch (IOException e) {
				System.err.println("Could not append silence data from " + silencefile.getName() + " to output.");
				e.printStackTrace();
			}
		}
		
		try {
			bw.close();
		} catch (IOException e) {
			System.out.println("Could not close file writer");
			e.printStackTrace();
		}
	}

}
