import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;



/**
 * The Class GraphBuilder.
 */
public class GraphBuilder {
	
	/** The signal to be plotted (for part 1). */
	private Sampling s;
	
	/**
	 * Instantiates a new graph builder.
	 *
	 * @param s the signal to be graphed
	 */
	public GraphBuilder(Sampling s){
		this.s = s;
	}
	
	/**
	 * Builds a series against time.
	 *
	 * @param name a label describing the series
	 * @param s the signal to be graphed
	 * @param values the values to be plotted
	 * @param stepSize the step size  to be used (a number of samples)
	 * @return the XY series
	 */
	private XYSeries buildSeriesAgainstTime(String name, Sampling s, double values[],double stepSize){
		XYSeries plot = new XYSeries(name);
		for(double i = 0; i < values.length; i += stepSize){
			plot.add((i / (s.getSamplingRate() / 1000)) * stepSize, values[(int) i]);
		}
		return plot;
	}
	
	/**
	 * Builds a graph on a single metric.
	 *
	 * @param name the name of the graph 
	 * @param axisLabel the axis label
	 * @param values the values to be plotted on the graph
	 * @param stepSize the step size (as a number of samples)
	 * @return the j panel
	 */
	public JPanel buildGraph(String name, String axisLabel , double[] values, double stepSize){
		XYSeries original = buildSeriesAgainstTime(name,s,values,1);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(original);
  
        JFreeChart chart = ChartFactory.createXYLineChart(
                name + " vs. Time",
                "Time (ms)",
                axisLabel,
                dataset, 
                PlotOrientation.VERTICAL,
                true,
                true,
                false
                );

        JPanel panel = new JPanel();
        ChartPanel chartPanel = new ChartPanel(chart);
        panel.add(chartPanel);
        return panel;
	}
	
	/**
	 * Builds the graph showing all of the metrics considered for the signal (original,energy,magnitude,zcr). All are normalised.
	 *
	 * @return the j panel
	 */
	public JPanel buildGraphAllMetrics(){
		
		//build the plot of the original signal
		XYSeries original = buildSeriesAgainstTime("Signal",s,s.signalNormalised(1, 0.03),1);
		//energy
		XYSeries energy = buildSeriesAgainstTime("Energy",s,s.shortTermAverageEnergyNormalised(1,0.03),1);
		//magnitude
		XYSeries magnitude = buildSeriesAgainstTime("Magnitude",s,s.shortTermAverageMagnitudeNormalised(1, 0.03),1);
		//zcr
		XYSeries zeroCrossing =  buildSeriesAgainstTime("Average Zero Crossing Rate",s,s.shortTermAverageZeroCrossingRateNormalised(1,0.03),1);
		
		
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(original);
        dataset.addSeries(energy);
        dataset.addSeries(magnitude);
        dataset.addSeries(zeroCrossing);
        
        //Create an object for the graph
        JFreeChart chart = ChartFactory.createXYLineChart(
                "All Metrics vs. Time (normalised)",
                "Time (ms)",
                "s[t],E[t],M[t],Z[t]",
                dataset, 
                PlotOrientation.VERTICAL,
                true,
                true,
                false
                );

        JPanel panel = new JPanel();
        ChartPanel chartPanel = new ChartPanel(chart);
        panel.add(chartPanel);
        return panel;
	}
	
	/**
	 * Builds a series from the arrays x,y starting at start and ending at end.
	 *
	 * @param name the name
	 * @param start the start
	 * @param end the end
	 * @param x the x
	 * @param y the y
	 * @return the xY series
	 */
	private static XYSeries buildSeries(String name,int start, int end,  double[] x, double[] y){
		XYSeries series = new XYSeries(name);
		for(int i = start; i < end; i++){
			series.add(x[i], y[i]);
		}
		return series;
	}
	
	/**
	 * Builds a scatter plot from arrays x and y. x and y contain the points for datasetLens.length sets: the size of each dataset is held in datasetLens.
	 *
	 * @param graphName the graph name
	 * @param datasetNames the set of names for the datasets
	 * @param datasetLens the length of each dataset
	 * @param xLabel the x label
	 * @param yLabel the y label
	 * @param x the x coordinates for all the points
	 * @param y the y coordinates for all the points
	 * @return the j panel
	 */
	public static JPanel buildScatter(String graphName,String[] datasetNames,int[] datasetLens, String xLabel, String yLabel, double[] x, double[] y){
		if(x.length != y.length){
			System.err.println("Number of samples for X Axis does not match number for Y Axis");
			return null;
		}
		XYSeries plot;
		XYSeriesCollection datasets = new XYSeriesCollection();
		int currentPos = 0;
		for(int i = 0; i < datasetNames.length; i++){
			plot = buildSeries(datasetNames[i],currentPos,currentPos+datasetLens[i],x,y);
			datasets.addSeries(plot);
			currentPos = datasetLens[i];
		}
				
		JFreeChart scatter = ChartFactory.createScatterPlot(graphName, xLabel, yLabel, datasets);
		
		JPanel panel = new JPanel();
		ChartPanel scatterPanel = new ChartPanel(scatter);
		panel.add(scatterPanel);
		return panel;
	}
	
}
