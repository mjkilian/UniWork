package jobs;


import io.inputformats.Input1;
import io.outputformats.Output5;
import mappers.Mapper5;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import reducers.Reducer5;
/*Given a timestamp (same format as the timestamps in the dataset), print all
article_id/rev_id pairs for the revisions that were current at that point in time, plus the
timestamp of the corresponding modification, all in a space-separated format. That is, for each
article, you must find the single revision whose timestamp is closest but not past the timestamp
supplied by the user. The output should be sorted by article_id
*/
public class Task5 extends Configured implements Tool {
	public void usage(){
		System.err.println("Task5 ISO-8601_Timestamp_Current");
	}
	@Override
	public int run(String[] args) throws Exception {
		/* Set configuration */
		Configuration conf = new Configuration();
		// Set conf variables pointing to the BD4 cluster
		conf.set("fs.defaultFS", "hdfs://bigdata-06.dcs.gla.ac.uk:8020");
		conf.set("mapred.job.tracker", "bigdata-06.dcs.gla.ac.uk:8021");
		conf.set("mapred.jar", "file:///users/level4/1003264m/DatData/Code/Task5.jar");
		FileSystem fs = FileSystem.get(conf);
		fs.delete(new Path("/user/1003264m/output_folder/"), true);

		/* initialise Job */
		Job job = new Job(conf);
		job.setJobName("Task 5");
		job.setJarByClass(Task5.class);

		/* Read in timestamp and minimum modifications arguments */
		if (args.length < 1 ) {
			usage();
			return 1;
		} else {
			job.getConfiguration().set("current_timestamp",args[0]);
		}

		/*
		 * Set I/O
		 */
		job.setInputFormatClass(Input1.class);
		job.setOutputFormatClass(Output5.class);

		/* Set classes for mappers/reducers */
		job.setMapperClass(Mapper5.class);
		job.setReducerClass(Reducer5.class);
		//job.setCombinerClass(Reducer5.class);

		/* Set output key values */
		job.setOutputKeyClass(LongWritable.class);
		job.setOutputValueClass(Text.class);

		FileInputFormat.addInputPath(job, new Path("/user/bd4-project1/enwiki-20080103-sample.txt"));
		FileOutputFormat.setOutputPath(job, new Path("/user/1003264m/output_folder/"));
		
		/* submit job */
		job.submit();
		return (job.waitForCompletion(true) ? 0 : 1);
	}
	
	public static void main(String[] args) throws Exception {
		 System.exit(ToolRunner.run(new Configuration(), new Task5(), args));
	}

}
